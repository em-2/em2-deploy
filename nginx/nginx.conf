worker_processes 1;

user nobody nogroup;
pid /tmp/nginx.pid;
error_log /dev/stdout warn;

events {
  worker_connections 1024;
  accept_mutex off;
  use epoll;
}

http {
  include mime.types;
  # fallback in case we can't determine a type
  default_type application/octet-stream;

  log_format custom '$http_x_forwarded_for $remote_addr request="$request" status=$status time=${request_time}s '
                    'request_size=$request_length response_size=$body_bytes_sent host=$http_host';
  access_log /dev/stdout custom;
  sendfile on;
  proxy_max_temp_file_size 0;
  resolver 127.0.0.11 ipv6=off;

  server {
    # if no Host match, close the connection
    listen 443 ssl http2 default_server;

    ssl on;
    ssl_certificate /ssl/cert.pem;
    ssl_certificate_key /ssl/key.pem;

    return 444;
  }

  upstream server_web {
    server web:8000 fail_timeout=2;
  }

  upstream server_auth {
    server auth:8000 fail_timeout=0;
  }

  server {
    listen 443 ssl http2;
    # DOMESTIC_DOMAIN will be replaced with the real host name in ./deploy
    server_name {{DOMESTIC_DOMAIN}};
    include /etc/nginx/allowed.nginx.conf;

    ssl on;
    ssl_certificate /ssl/cert.pem;
    ssl_certificate_key /ssl/key.pem;

    keepalive_timeout 5;

    location /auth {
      proxy_set_header Host $http_host;
      proxy_set_header X-Forwarded-For $remote_addr;
      proxy_http_version 1.1;
      proxy_redirect off;

      proxy_send_timeout 3;
      proxy_read_timeout 3;
      proxy_connect_timeout 3;

      rewrite ^/auth/(.*)$ /$1 break;
      proxy_pass http://server_auth;
    }

    location / {
      proxy_set_header Host $http_host;
      proxy_http_version 1.1;
      proxy_redirect off;

      proxy_send_timeout 3;
      proxy_read_timeout 3;
      proxy_connect_timeout 3;

      rewrite ^/(.*)$ /d/$1 break;
      proxy_pass http://server_web;
    }

    location /ws {
      proxy_set_header Host $http_host;
      proxy_set_header Upgrade $http_upgrade;
      proxy_http_version 1.1;
      proxy_set_header Connection "upgrade";
      proxy_redirect off;

      # 300 will mean websocket connections disconnect,
      # this is intentional, ws clients should be resilient enough to reconnect
      proxy_send_timeout 300;
      proxy_read_timeout 300;
      proxy_connect_timeout 3;

      rewrite ^/(.*)$ /d/$1 break;
      proxy_pass http://server_web;
    }

    error_page 502 503 504 =503 /maintenance.html;
    location = /maintenance.html {
      root /;
      internal;
    }
  }

  server {
    listen 443 ssl http2;
    # EM2_EXTERNAL_DOMAIN will be replaced with the real host name in ./deploy
    server_name {{EM2_EXTERNAL_DOMAIN}};

    # TODO include again when cloudflare proxy issue is fixed
    # include /etc/nginx/allowed.nginx.conf;

    ssl on;
    ssl_certificate /ssl/cert.pem;
    ssl_certificate_key /ssl/key.pem;

    keepalive_timeout 5;

    location / {
      proxy_set_header Host $http_host;
      proxy_http_version 1.1;
      proxy_redirect off;

      proxy_send_timeout 3;
      proxy_read_timeout 3;
      proxy_connect_timeout 3;

      rewrite ^/(.*)$ /f/$1 break;
      proxy_pass http://server_web;
    }

    error_page 502 503 504 =503 /maintenance.html;
    location = /maintenance.html {
      root /;
      internal;
    }
  }
}
